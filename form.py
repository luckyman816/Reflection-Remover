# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'form.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
import rawpy
import imageio
import cv2
import numpy as np
import requests
import resources
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QWidget, QVBoxLayout, QLabel, QPushButton, QProgressBar, QLineEdit, QFileDialog, QFrame, QStyleFactory, QComboBox, QProgressBar, QMessageBox
from PyQt5.QtGui import QFont, QPixmap, QPalette, QColor, QImage
from PyQt5.QtCore import Qt, QTimer
api_key = "sk-v5zDW3WZNAZdklzMhuUuzEg6Yl0sTOdFjOBnoWLl6qtvbLRO"
def set_dark_theme(app):
    app.setStyle(QStyleFactory.create("Fusion"))
    
    # Set the palette to the dark palette
    palette = app.palette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    palette.setColor(QPalette.Base, QColor(25, 25, 25))
    palette.setColor(QPalette.AlternateBase, QColor(53, 53, 53))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.white)
    palette.setColor(QPalette.Text, Qt.white)
    palette.setColor(QPalette.Button, QColor(53, 53, 53))
    palette.setColor(QPalette.ButtonText, Qt.white)
    palette.setColor(QPalette.BrightText, Qt.red)
    palette.setColor(QPalette.Highlight, QColor(0, 170, 255).lighter())
    palette.setColor(QPalette.HighlightedText, Qt.black)
    app.setPalette(palette)

class Ui_MainWindow(object):
    
    global selected_image_path_g
    selected_image_path_g = ''
    global file_name_without_extension
    file_name_without_extension = ''
    global output_image_type
    output_image_type = '.jpeg'
    global selected_image_directory
    selected_image_directory = ''
    def __init__(self):
        self.selected_image_path_g = ''
        self.file_name_without_extension = ''
        self.output_image_type = '.jpeg'
        self.selected_image_directory = ''
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("Reflection Removal Tool")
        MainWindow.resize(1280, 638)
        MainWindow.setAutoFillBackground(False)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(MainWindow)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        
        # --------------------Image extension Conversion Part-------------------#
        font = QtGui.QFont()
        font.setPointSize(20)
        self.iconLabel = QtWidgets.QLabel(MainWindow)
        self.iconLabel.setAlignment(QtCore.Qt.AlignLeft)
        self.iconLabel.setObjectName("iconLabel")
        self.iconLabel.setFixedHeight(70)
        self.iconLabel.setFixedWidth(70)
        iconPixmap = QPixmap(":/eye1.png")
        self.iconLabel.setPixmap(iconPixmap)
        
        self.label = QtWidgets.QLabel(MainWindow)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignHCenter | QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.topLayout = QtWidgets.QHBoxLayout()
        self.topLayout.addWidget(self.iconLabel)
        self.topLayout.addWidget(self.label)
        
        self.verticalLayout_2.addLayout(self.topLayout)
        
        self.converterLayout = QtWidgets.QVBoxLayout()
        self.converterLayout.setObjectName("converterLayout")
        self.imageConverterLabel = QtWidgets.QLabel(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.imageConverterLabel.setFont(font)
        self.imageConverterLabel.setObjectName("imageConverterLabel")
        self.converterLayout.addWidget(self.imageConverterLabel)
        spacerItem = QtWidgets.QSpacerItem(20, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.converterLayout.addItem(spacerItem)
        
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.btn_SelectInputFolder = QtWidgets.QPushButton(MainWindow)
        self.btn_SelectInputFolder.setObjectName("btn_SelectInputFolder")
        self.btn_SelectInputFolder.clicked.connect(self.btn_SelectInputFolder_clicked)
        self.btn_SelectInputFolder.setFixedWidth(150)
        self.btn_SelectInputFolder.setFixedHeight(30)
        self.horizontalLayout.addWidget(self.btn_SelectInputFolder)
        
        self.directoryLabel = QtWidgets.QLabel(MainWindow)
        self.directoryLabel.setObjectName("directoryLabel")
        self.horizontalLayout.addWidget(self.directoryLabel)
        
        self.le_InputDirectory = QtWidgets.QLineEdit(MainWindow)
        self.le_InputDirectory.setEnabled(True)
        self.le_InputDirectory.setObjectName("le_InputDirectory")
        self.horizontalLayout.addWidget(self.le_InputDirectory)
        
        self.btn_SelectOutputFolder = QtWidgets.QPushButton(MainWindow)
        self.btn_SelectOutputFolder.setObjectName("btn_SelectOutputFolder")
        self.btn_SelectOutputFolder.clicked.connect(self.btn_SelectOutputFolder_clicked)
        self.btn_SelectOutputFolder.setFixedWidth(150)
        self.btn_SelectOutputFolder.setFixedHeight(30)
        self.horizontalLayout.addWidget(self.btn_SelectOutputFolder)
        
        self.directoryLabel_1 = QtWidgets.QLabel(MainWindow)
        self.directoryLabel_1.setObjectName("directoryLabel_1")
        self.horizontalLayout.addWidget(self.directoryLabel_1)
        
        self.le_OutputDirectory = QtWidgets.QLineEdit(MainWindow)
        self.le_OutputDirectory.setEnabled(True)
        self.le_OutputDirectory.setObjectName("le_OutputDirectory")
        self.horizontalLayout.addWidget(self.le_OutputDirectory)
        
        self.btn_ConvertImg = QtWidgets.QPushButton(MainWindow)
        self.btn_ConvertImg.setObjectName("btn_ConvertImg")
        self.btn_ConvertImg.clicked.connect(self.btn_ConverterImg_clicked)
        self.btn_ConvertImg.setFixedWidth(100)
        self.btn_ConvertImg.setFixedHeight(25)
        self.horizontalLayout.addWidget(self.btn_ConvertImg)
        
        # ---------------------Ease the Reflection Light Part-----------------------------#
        self.converterLayout.addLayout(self.horizontalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.converterLayout.addItem(spacerItem1)
        self.verticalLayout_2.addLayout(self.converterLayout)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.progressLabel = QtWidgets.QLabel(MainWindow)
        self.progressLabel.setObjectName("progressLabel")
        self.progressLabel.setFont(QFont("Times", 10))
        self.titleLayout = QtWidgets.QHBoxLayout()
        self.titleLayout.addWidget(self.label_5)
        self.titleLayout.addWidget(self.progressLabel)
        
        self.verticalLayout.addLayout(self.titleLayout)
        spacerItem2 = QtWidgets.QSpacerItem(20, 13, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.verticalLayout.addItem(spacerItem2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.selectedImg = QtWidgets.QLabel(MainWindow)
        self.selectedImg.setMinimumSize(QtCore.QSize(650, 400))
        self.selectedImg.setMaximumSize(QtCore.QSize(650, 400))
        self.selectedImg.setFrameShape(QtWidgets.QFrame.Box)
        self.selectedImg.setText("")
        self.selectedImg.setObjectName("selectedImg")
        self.horizontalLayout_2.addWidget(self.selectedImg)
        
        self.generatedImg = QtWidgets.QLabel(MainWindow)
        self.generatedImg.setMinimumSize(QtCore.QSize(650, 400))
        self.generatedImg.setMinimumSize(QtCore.QSize(650, 400))
        self.generatedImg.setFrameShape(QtWidgets.QFrame.Box)
        self.generatedImg.setText("")
        self.generatedImg.setObjectName("generatedImg")
        self.horizontalLayout_2.addWidget(self.generatedImg)
        self.verticalLayout.addLayout(self.horizontalLayout_2)
        
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSpacing(20)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_SelectImage = QtWidgets.QPushButton(MainWindow)
        self.btn_SelectImage.setObjectName("btn_SelectImage")
        self.btn_SelectImage.clicked.connect(self.btn_SelectImage_clicked)
        self.btn_SelectImage.setFixedWidth(150)
        self.btn_SelectImage.setFixedHeight(30)
        self.horizontalLayout_3.addWidget(self.btn_SelectImage)
        
        self.btn_GenerateImage = QtWidgets.QPushButton(MainWindow)
        self.btn_GenerateImage.setObjectName("btn_GenerateImage")
        self.btn_GenerateImage.clicked.connect(self.btn_Generated_Image_clicked)
        self.btn_GenerateImage.setFixedWidth(150)
        self.btn_GenerateImage.setFixedHeight(30)
        
        font = QFont()
        font.setPointSize(13)
        self.output_image_type_combobox = QtWidgets.QComboBox(MainWindow)
        self.output_image_type_combobox.setObjectName("output_image_type_combobox")
        self.output_image_type_combobox.setFixedWidth(200)
        self.output_image_type_combobox.setFixedHeight(30)
        self.output_image_type_combobox.setFont(font)
        self.output_image_type_combobox.addItem(".jpeg")
        self.output_image_type_combobox.addItem(".tiff")
        self.output_image_type_combobox.currentIndexChanged.connect(self.output_image_type_combobox_index_changed)
        
        self.horizontalLayout_OutputImageType = QtWidgets.QHBoxLayout()
        self.horizontalLayout_OutputImageType.setSpacing(20)
        self.horizontalLayout_OutputImageType.setObjectName("horizontalLayout_OutputImageType")
        self.horizontalLayout_OutputImageType.addSpacing(300)
        self.horizontalLayout_OutputImageType.addWidget(self.output_image_type_combobox)
        self.horizontalLayout_OutputImageType.addWidget(self.btn_GenerateImage)
        
        self.horizontalLayout_3.addLayout(self.horizontalLayout_OutputImageType)
        
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_2.addLayout(self.verticalLayout)
        self.verticalLayout_4.addLayout(self.verticalLayout_2)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Reflection Removal Tool"))
        self.imageConverterLabel.setText(_translate("MainWindow", "Image Converter Tool (NEF to JPEG)"))
        self.btn_SelectInputFolder.setText(_translate("MainWindow", "Select Input Folder"))
        self.btn_SelectOutputFolder.setText(_translate("MainWindow", "Select Output Folder"))
        self.directoryLabel.setText(_translate("MainWindow", "Folder Directory:"))
        self.directoryLabel_1.setText(_translate("MainWindow", "Folder Directory:"))
        self.btn_ConvertImg.setText(_translate("MainWindow", "Convert Image"))
        self.progressLabel.setText(_translate("MainWindow", ""))
        self.label_5.setText(_translate("MainWindow", "Remove Reflection"))
        self.btn_SelectImage.setText(_translate("MainWindow", "Select Image"))
        self.btn_GenerateImage.setText(_translate("MainWindow", "Generate Image"))
    def btn_SelectInputFolder_clicked(self):
        options = QFileDialog.Options(QFileDialog.ShowDirsOnly)
        directory = QFileDialog.getExistingDirectory(MainWindow, "Select Directory", options=options)
        if directory:
            self.le_InputDirectory.setText(directory)
    def btn_SelectOutputFolder_clicked(self):
        options = QFileDialog.Options(QFileDialog.ShowDirsOnly)
        directory = QFileDialog.getExistingDirectory(MainWindow, "Select Directory", options=options)
        if directory:
            self.le_OutputDirectory.setText(directory)
    def btn_ConverterImg_clicked(self):
        input_dir = self.le_InputDirectory.text()
        output_dir = self.le_OutputDirectory.text()
        self.convert_nef_to_jpg(input_dir, output_dir)
        self.show_message_box()
    def show_message_box(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("The image conversion has been successfully completed!")
        msg.setWindowTitle("Message Box")
        msg.setStandardButtons(QMessageBox.Ok)
        msg.exec_()
    
    def show_progress_dialog_open(self):
        self.message_box = QMessageBox()
        self.message_box.setIcon(QMessageBox.Information)
        self.message_box.setText("The Image has been updated successfully!")
        self.message_box.setWindowTitle("Message Box")
        self.message_box.setStandardButtons(QMessageBox.Ok)
        self.message_box.exec_()
    def btn_SelectImage_clicked(self):
        options = QFileDialog.Options()
        options |= QFileDialog.DontUseNativeDialog
        file_dialog = QFileDialog()
        file_dialog.setNameFilters(["Image files (*.png *.jpg *.jpeg *.bmp *.gif)"])
        file_dialog.setOptions(options)
        if file_dialog.exec_():
            selected_files = file_dialog.selectedFiles()
            if selected_files:
                selected_image_path = selected_files[0]
                selected_image_name = os.path.basename(selected_image_path)
                self.file_name_without_extension = os.path.splitext(selected_image_name)[0]
                self.selected_image_path_g = selected_files[0]
                self.selected_image_directory = os.path.dirname(selected_image_path)
                pixmap = QPixmap(selected_image_path)
                self.selectedImg.setPixmap(pixmap)
                self.selectedImg.setScaledContents(True)
                print("file_name_without_extension---->", self.file_name_without_extension)
    def output_image_type_combobox_index_changed(self, index):
        self.output_image_type = self.output_image_type_combobox.currentText()
    
    @staticmethod
    def convert_nef_to_jpg(input_dir, output_dir):
        # Create the output directory if it doesn't exist
        os.makedirs(output_dir, exist_ok=True)
    
        # Loop through all files in the input directory
        for filename in os.listdir(input_dir):
        # Check if the file is a NEF image
            if filename.endswith(".NEF") or filename.endswith(".nef"):
                # Construct the input and output file paths
                input_path = os.path.join(input_dir, filename)
                output_path = os.path.join(output_dir, os.path.splitext(filename)[0] + ".jpg")
                
                # Open the NEF image using rawpy
                with rawpy.imread(input_path) as raw:
                    # Postprocess the image
                    rgb = raw.postprocess()
                
                # Save the processed image as JPGR
                imageio.imwrite(output_path, rgb)
                
                print(f"Converted: {filename} -> {os.path.basename(output_path)}")
    def convert_jpeg_to_tiff(self, input_file, output_file):
        # Load the JPEG image using QImage
        image = QImage(input_file)
        
        # Save the image as TIFF format
        image.save(output_file, "TIFF")
    def convert_jpeg_to_jpg(self, input_file, output_file):
        # Load the JPEG image using QImage
        image = QImage(input_file)
        
        # Save the image as TIFF format
        image.save(output_file, "JPG")

    def resize_image(self, image_path, output_size=(1600, 1066)):
        
        # Load the image
        image = cv2.imread(image_path)
        
        # Resize the image to the specified size
        resized_image = cv2.resize(image, output_size, interpolation=cv2.INTER_AREA)
        
        # Save the resized image
        cv2.imwrite(f"{self.selected_image_directory}/resized_image_{self.file_name_without_extension}.jpg", resized_image)
        
        return resized_image
    def find_glare_mask(self, image_path):
        # Load the image
        image = cv2.imread(image_path)
        
        # Convert the image to the HSV color space
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        
        # Define the HSV range for glare (adjust these values based on your specific case)
        lower_glare = np.array([0, 0, 100])
        upper_glare = np.array([180, 30, 255])
        
        # Create a mask for the glare region
        mask = cv2.inRange(hsv, lower_glare, upper_glare)
        
        # Apply morphological operations to refine the mask
        kernel = np.ones((5, 5), np.uint8)
        mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
        
        # Invert the mask (optional, depending on how you want to use it)
        mask = cv2.bitwise_not(mask)
        
        w, h = mask.shape[:2]
        
        for i in range(w):
            for j in range(h):
                if mask[i][j]< 30:
                    mask[i][j]=255
                else:
                    mask[i][j]=0
        
        # Apply the mask to the original image to highlight the glare region
        result = cv2.bitwise_and(image, image, mask=mask)
        
        # Save the mask image
        cv2.imwrite(f"{self.selected_image_directory}/glare_mask_{self.file_name_without_extension}.png", mask)
        
        return result, mask
    def btn_Generated_Image_clicked(self):
        resized_image = self.resize_image(self.selected_image_path_g)
            
        result, mask = self.find_glare_mask(f"{self.selected_image_directory}/resized_image_{self.file_name_without_extension}.jpg")
        
        response = requests.post(
            f"https://api.stability.ai/v2beta/stable-image/edit/inpaint",
            headers={
                "authorization": f"Bearer {api_key}",
                "accept": "image/*"
            },
            files={
                "image": open(f"{self.selected_image_directory}/resized_image_{self.file_name_without_extension}.jpg", "rb"),
                "mask": open(f"{self.selected_image_directory}/glare_mask_{self.file_name_without_extension}.png", "rb"),
            },
            data={
                "prompt": "Erase the reflextion and sustitute with similar color",
                "output_format": "webp",
            },
        )

        if response.status_code == 200:
            with open(f"{self.selected_image_directory}/inpainted_image_{self.file_name_without_extension}.jpeg", 'wb') as file:
                file.write(response.content)

            # Second code part
            response = requests.post(
                f"https://api.stability.ai/v2beta/stable-image/edit/remove-background",
                headers={
                    "authorization": f"Bearer {api_key}",
                    "accept": "image/*"
                },
                files={
                    "image": open(f"{self.selected_image_directory}/inpainted_image_{self.file_name_without_extension}.jpeg", "rb")
                },
                data={
                    "output_format": "webp"
                },
            )

            if response.status_code == 200:
                with open(f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.jpeg", 'wb') as file:
                    file.write(response.content)
            else:
                raise Exception(str(response.json()))
        else:
            raise Exception(str(response.json()))
            # Display the generated image
        if self.output_image_type == ".tiff":
            self.convert_jpeg_to_tiff(f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.jpeg", f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.tiff")
        else : 
            self.convert_jpeg_to_jpg(f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.jpeg", f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.jpg")
        pixmap = QPixmap(f"{self.selected_image_directory}/result_image_{self.file_name_without_extension}.jpeg")
        self.generatedImg.setPixmap(pixmap)
        self.generatedImg.setScaledContents(True)
        self.show_progress_dialog_open()
        #end get_darkModePalette def

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    set_dark_theme(app)  # Set the dark theme
    MainWindow = QtWidgets.QWidget()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle("Reflection Removal Tool")
    MainWindow.show()
    sys.exit(app.exec_())
